// Define pins for ultrasonic sensor
const int trigPin = 5; // Trig pin of ultrasonic sensor connected to Arduino pin 9
const int echoPin = 6; // Echo pin of ultrasonic sensor connected to Arduino pin 10

// Define pins for motor control
const int motorPWM = 9; // PWM pin connected to PWM input of MD10C motor driver
const int motorDir = 7; // Direction  pin connected to MD10C motor driver


// Define variables
long duration; // Time taken for the ultrasonic pulse to return
int distance; // Distance measured by the ultrasonic sensor
int pwmSpeed; // PWM speed for the motor

void setup() {
  Serial.begin(9600); // Initialize serial communication
  pinMode(trigPin, OUTPUT); // Set trigPin as an output
  pinMode(echoPin, INPUT); // Set echoPin as an input
  
  // Motor control pins as outputs
  pinMode(motorPWM, OUTPUT);
  pinMode(motorDir, OUTPUT);

}

void loop() {
  // Clear the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  
  // Send a 10 microsecond pulse to trigger the sensor
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Read the duration of the pulse from the echoPin
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance in centimeters
  distance = duration * 0.034 / 2;
  
  // Print the distance to the serial monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm\tPWM Speed: ");
  Serial.print(pwmSpeed);
  Serial.println("%");
  
  // Motor control based on distance
  if (distance < 5) {
    // Move in direction 1 with 25% speed
    pwmSpeed = 25;
    analogWrite(motorPWM, 64); // 25% of maximum PWM value
    digitalWrite(motorDir, HIGH);
  } else if (distance >= 5 && distance < 10) {
    // Stop the motor
    pwmSpeed = 0;
    analogWrite(motorPWM, 0); // 0% speed
  } else if (distance >= 10 && distance < 20) {
    // Move in direction 2 with 25% speed
    pwmSpeed = 25;
    analogWrite(motorPWM, 64); // 25% of maximum PWM value
    digitalWrite(motorDir, LOW);
  } else if (distance >= 20 && distance < 50) {
    // Move in direction 1 with 50% speed
    pwmSpeed = 50;
    analogWrite(motorPWM, 128); // 50% of maximum PWM value
    digitalWrite(motorDir, HIGH);
  } else if (distance >= 50 && distance < 100) {
    // Move in direction 1 with 100% speed
    pwmSpeed = 100;
    analogWrite(motorPWM, 255); // 100% of maximum PWM value
    digitalWrite(motorDir, HIGH);
  }
  
  // Wait a short delay before the next measurement
  delay(1000);
}
